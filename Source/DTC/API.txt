
The serial protocol used between the Gateway and the Controller is a simple JSON.
All commands ends with a newline. The serial commands has the following format:

{"id":[id],"ip":[ip],"type":[type],"sub-type":[sub-type],"data":[data]}/n

where

	id:					The unique id of the node that sends or should receive the message (GUID).
	ip:					The unique ip-address of the node that sends or should receive the message.
	type				Type of message sent (see table below).
	sub-type			Depending on message type this field has different meaning. See tables below.
	data				The payload holds the message coming in from node or instruction going out to node.

type:

Type			Value	Comment
presentation	0		Sent by a node when it presents itself. This is usually done in setup() at startup.
set				1		This message is sent from or to a node when a node parameter value should be updated.
req				2		Requests a parameter value (usually from an node destined for controller).
internal		3		This is a special internal message. See table below for the details.
stream			4		Used for OTA firmware updates.

(0) presentation:
When a presentation message is sent, sub-type has to be set to one the following:

Type					Value	Comment
S_GENERIC_DECODER		0		Generic decoder
S_LOCO_DECODER			1		Locomotive decoder
S_ACC_DECODER			2		Accessory decoder
S_FUNC_DECODER			3		Functions decoder
S_TRACK_DECODER			4		Track decoder

(1) set, (2) req:
When a set or request message is being sent, the sub-type has to be one of the following:

Type					Value	Comment
V_TEMP					0		Temperature
V_HUM					1		Humidity
V_LIGHT					2		Light status. 0=off 1=on
V_DIMMER				3		Dimmer value. 0-100%
V_PRESSURE				4		Atmospheric Pressure
V_FORECAST				5		Whether forecast. One of "stable", "sunny", "cloudy", "unstable", "thunderstorm" or "unknown"
V_RAIN					6		Amount of rain
V_RAINRATE				7		Rate of rain
V_WIND					8		Windspeed
V_GUST					9		Gust
V_DIRECTION				10		Wind direction
V_UV					11		UV light level
V_WEIGHT				12		Weight (for scales etc)
V_DISTANCE				13		Distance
V_IMPEDANCE				14		Impedance value
V_ARMED					15		Armed status of a security sensor. 1=Armed, 0=Bypassed
V_TRIPPED				16		Tripped status of a security sensor. 1=Tripped, 0=Untripped
V_WATT					17		Watt value for power meters
V_KWH					18		Accumulated number of KWH for a power meter
V_SCENE_ON				19		Turn on a scene
V_SCENE_OFF				20		Turn of a scene
V_HEATER				21		Mode of header. One of "Off", "HeatOn", "CoolOn", or "AutoChangeOver"
V_HEATER_SW				22		Heater switch power. 1=On, 0=Off
V_LIGHT_LEVEL			23		Light level. 0-100%
V_VAR1					24		Custom value
V_VAR2					25		Custom value
V_VAR3					26		Custom value
V_VAR4					27		Custom value
V_VAR5					28		Custom value
V_UP					29		Window covering. Up.
V_DOWN					30		Window covering. Down.
V_STOP					31		Window covering. Stop.
V_IR_SEND				32		Send out an IR-command
V_IR_RECEIVE			33		This message contains a received IR-command
V_FLOW					34		Flow of water (in meter)
V_VOLUME				35		Water volume
V_LOCK_STATUS			36		Set or get lock status. 1=Locked, 0=Unlocked
V_DUST_LEVEL			37		Dust level
V_VOLTAGE				38		Voltage level
V_CURRENT				39		Current level

(3) internal:
The internal messages are used for different tasks in the communication between nodes, the gateway to controller and between nodes and the gateway.
When an internal messages is sent, the sub-type has to be one of the following:

Type					Value	Comment
I_BATTERY_LEVEL			0		Use this to report the battery level (in percent 0-100).
I_TIME					1		Nodes can request the current time from the Controller using this message. The time will be reported as the seconds since 1970.
I_VERSION				2		Nodes report their library version at startup using this message type.
I_ID_REQUEST			3		Use this to request a unique node id from the controller.
I_ID_RESPONSE			4		Id response back to node. Payload contains node id.
I_CONFIG				5		Config request from node. Reply with (M)etric or (I)mperal back to node.
I_LOG_MESSAGE			6		Sent by the gateway to the Controller to trace-log a message.
I_SKETCH_NAME			7		Optional sketch name that can be used to identify node in the Controller GUI.
I_SKETCH_VERSION		8		Optional sketch version that can be reported to keep track of the version of node in the Controller GUI.
I_REBOOT				9		Used by OTA firmware updates. Request for node to reboot.
I_GATEWAY_READY			10		Send by gateway to controller when startup is complete.







--------------------------------------------------------------------------------------------------------------------------------------------
DTCNode constructor
Create an instance of the node.

DTCNode(HardwareSerial &uart);
	uart - a reference of UART object for link to ESP8266 module
--------------------------------------------------------------------------------------------------------------------------------------------
Starting up the library
To initialize radio and start the library, you must call begin(). Begin initializes the node but you can also configure the node operating parameters manually.
Call this before anything else in the library.

void begin(
	void (*msgCallback)(const MyMessage &),
	uint8_t channel);

	begin(NULL, WIFI_CHANNEL);

	msgCallback -	Callback function for incoming messages from other nodes or controller and request responses. Default is NULL.
	channel -		WiFi channel. Default is channel 6.

--------------------------------------------------------------------------------------------------------------------------------------------
The sensor automatically fetches a unique node id (auto mode).
The id received can be retrieved by calling this method.

char* getNodeId();
--------------------------------------------------------------------------------------------------------------------------------------------
Presentation
The sensors should present themselves before they start reporting sensor data to the controller.

void present(uint8_t nodeType);
	nodeType -	The node type you want to create.


You can also send in some optional meta information for this sensor node.

void sendSketchInfo(const char *name, const char *version);
	name -		String containing a short Sketch name or NULL if not applicable.
	version -	String containing a short Sketch version or NULL if not applicable.
--------------------------------------------------------------------------------------------------------------------------------------------
Sending data
You can send data to the controller or some other sensor by using the send(msg) method.

bool send(MyMessage &msg);
	msg -	The message you want to send. See DTCMessage for details.

If your node is running on batteries and you've implemented battery level measurements you can send the battery level back to the controller.

void sendBatteryLevel(uint8_t level);
	level - Battery level between 0-100(%)
--------------------------------------------------------------------------------------------------------------------------------------------
Requesting data
Requests a variable value from gateway or some other sensor in the radio network.
Make sure to add callback-method in begin-method to handle request responses.
If you send this request to some other sensor-node you must handle the reply message yourself in the destination node.

void request(uint8_t variableType, char* destination);
	variableType -		The variableType to fetch.
	destination -		The nodeId of other node to request data from in radio network. Default is gateway.
--------------------------------------------------------------------------------------------------------------------------------------------
Fetching time from controller
Requests time from controller. Answer will be delivered to the specified callback.

void requestTime(void (* timeCallback)(unsigned long));
	callback - Callback for time request. Incoming argument is seconds since 1970.
--------------------------------------------------------------------------------------------------------------------------------------------
Controller configuration
Your node is responsible for reporting data in the correct units of measure.
The controller can give you a "hint" for which units of measure to report.
The following returns the most recent node configuration received from controller.

ControllerConfig getConfig();
ControllerConfig only contains the filed isMetric today which has the following meaning:

true (=metric) Report sensor data in Celsius, meter, cm, gram, km/h, m/s etc..
false (=imperial) - Fahrenheit, feet, gallon, mph etc...
--------------------------------------------------------------------------------------------------------------------------------------------
Processing incoming radio messages
Nodes that expects incoming messages, must check for new messages frequently.
All the magic happens in process() and this should be placed in your loop() section. Do not sleep!

boolean process();
--------------------------------------------------------------------------------------------------------------------------------------------
Saving/retrieving states in node
You can save a state (in local EEPROM) which is good for actuators to "remember" state between power cycles.
You have 256 bytes to play with. Note that there is a limitation on the number of writes the EEPROM can handle (~100 000 cycles).

void saveState(uint8_t pos, uint8_t value);
	pos -	The position to store value in (0-255)
	value - Value to store in position

Retrieving a state (from local EEPROM).

uint8_t loadState(uint8_t pos);
	pos - The position to fetch from EEPROM (0-255)
--------------------------------------------------------------------------------------------------------------------------------------------
Sleeping:
To save battery it is crucial to sleep you node as much as possible. The node can wake up from external interrupts or by a timer.

The following sleep your radio and Arduino (in PowerDownMode). Wakes up on timer interrupt.

void sleep(unsigned long ms);
	ms - Number of milliseconds to sleep.

The following sleeps your radio and Arduino (in PowerDownMode). Wakes up on timer interrupt or from an external interrupt.
See: http://arduino.cc/en/Reference/attachInterrupt for details on modes and which pin is assigned to what interrupt. On Nano/Pro Mini: 0=Pin2, 1=Pin3
Returns true if wake up was triggered by pin change and false means timer woke it up.

bool sleep(int interrupt, int mode, unsigned long ms=0);
	interrupt -	Interrupt that should trigger the wakeup.
	mode -		RISING, FALLING, CHANGE
	ms -		Number of milliseconds to sleep or 0 to sleep forever.
--------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------
Message constructor:
Create an instance of MyMessage. This class holds the message data and have some helpers for setting payload.

MyMessage(uint8_t childSensorId, uint8_t variableType);
	childSensorId -	The child sensor id to report data on; 0-254.
	variableType -	Variable type.
--------------------------------------------------------------------------------------------------------------------------------------------
Message manipulation:
You can manipulate your outgoing and incoming messages with the following getterS/setters.

// Setters for building message "on the fly"
MyMessage& setType(uint8_t type);
MyMessage& setSensor(uint8_t sensor);
MyMessage& setDestination(uint8_t destination);

// Setters for payload
MyMessage& set(void* payload, uint8_t length);
MyMessage& set(const char* value);
MyMessage& set(uint8_t value);
MyMessage& set(float value, uint8_t decimals);
MyMessage& set(unsigned long value);
MyMessage& set(long value);
MyMessage& set(unsigned int value);
MyMessage& set(int value);

// Getter for ack-flag. Returns true if this is an ack message.
bool isAck() const;

// Getters for picking up payload on incoming messages
char* getStream(char *buffer) const;
char* getString(char *buffer) const;
const char* getString() const;
void* getCustom() const;
uint8_t getByte() const;
bool getBool() const;
float getFloat() const;
long getLong() const;
unsigned long getULong() const;
int getInt() const;
unsigned int getUInt() const;
--------------------------------------------------------------------------------------------------------------------------------------------
